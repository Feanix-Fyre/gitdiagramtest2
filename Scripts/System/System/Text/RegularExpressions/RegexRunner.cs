namespace System.Text.RegularExpressions;

/// <summary>The <see cref="T:System.Text.RegularExpressions.RegexRunner" /> class is the base class for compiled regular expressions.</summary>
public abstract class RegexRunner
{
	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal int runtextbeg;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal int runtextend;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal int runtextstart;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal string runtext;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal int runtextpos;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal int[] runtrack;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal int runtrackpos;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal int[] runstack;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal int runstackpos;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal int[] runcrawl;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal int runcrawlpos;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal int runtrackcount;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal Match runmatch;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal Regex runregex;

	private int _timeout;

	private bool _ignoreTimeout;

	private int _timeoutOccursAt;

	private const int TimeoutCheckFrequency = 1000;

	private int _timeoutChecksToSkip;

	/// <summary>Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.RegexRunner" /> class.</summary>
	protected internal RegexRunner()
	{
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	/// <param name="regex">An instance of the regular expression engine.</param>
	/// <param name="text">The text to scan for a pattern match.</param>
	/// <param name="textbeg">The zero-based starting position in <paramref name="text" /> at which the regular expression engine scans for a match.</param>
	/// <param name="textend">The zero-based ending position in <paramref name="text" /> at which the regular expression engine scans for a match.</param>
	/// <param name="textstart">The zero-based starting position to scan for this match.</param>
	/// <param name="prevlen">The number of characters in the previous match.</param>
	/// <param name="quick">
	///   <see langword="true" /> to search for a match in quick mode; otherwise, <see langword="false" />.</param>
	/// <param name="timeout">The timeout interval.</param>
	/// <returns>A match.</returns>
	protected internal Match Scan(Regex regex, string text, int textbeg, int textend, int textstart, int prevlen, bool quick, TimeSpan timeout)
	{
		return null;
	}

	private void StartTimeoutWatch()
	{
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected void CheckTimeout()
	{
	}

	private void DoCheckTimeout()
	{
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected abstract void Go();

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	/// <returns>Returns <see cref="T:System.Boolean" />.</returns>
	protected abstract bool FindFirstChar();

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected abstract void InitTrackCount();

	private void InitMatch()
	{
	}

	private Match TidyMatch(bool quick)
	{
		return null;
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected void EnsureStorage()
	{
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	/// <param name="index">The possible boundary position.</param>
	/// <param name="startpos">The starting position.</param>
	/// <param name="endpos">The ending position.</param>
	/// <returns>Returns <see cref="T:System.Boolean" />.</returns>
	protected bool IsBoundary(int index, int startpos, int endpos)
	{
		return false;
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	/// <param name="index">The possible ECMA boundary position.</param>
	/// <param name="startpos">The starting position.</param>
	/// <param name="endpos">The ending position.</param>
	/// <returns>Returns <see cref="T:System.Boolean" />.</returns>
	protected bool IsECMABoundary(int index, int startpos, int endpos)
	{
		return false;
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected void DoubleTrack()
	{
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected void DoubleStack()
	{
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected void DoubleCrawl()
	{
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	/// <param name="i">A number to save.</param>
	protected void Crawl(int i)
	{
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	/// <returns>Returns <see cref="T:System.Int32" />.</returns>
	protected int Popcrawl()
	{
		return 0;
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	/// <returns>Returns <see cref="T:System.Int32" />.</returns>
	protected int Crawlpos()
	{
		return 0;
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	/// <param name="capnum">A capture number.</param>
	/// <param name="start">The starting position of the capture.</param>
	/// <param name="end">The ending position of the capture.</param>
	protected void Capture(int capnum, int start, int end)
	{
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	/// <param name="capnum">A capture number.</param>
	/// <param name="uncapnum">A saved capture number.</param>
	/// <param name="start">The starting position.</param>
	/// <param name="end">The ending position.</param>
	protected void TransferCapture(int capnum, int uncapnum, int start, int end)
	{
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected void Uncapture()
	{
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	/// <param name="cap">The capture number.</param>
	/// <returns>Returns <see cref="T:System.Boolean" />.</returns>
	protected bool IsMatched(int cap)
	{
		return false;
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	/// <param name="cap">The capture number.</param>
	/// <returns>Returns <see cref="T:System.Int32" />.</returns>
	protected int MatchIndex(int cap)
	{
		return 0;
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	/// <param name="cap">The capture number.</param>
	/// <returns>Returns <see cref="T:System.Int32" />.</returns>
	protected int MatchLength(int cap)
	{
		return 0;
	}
}
