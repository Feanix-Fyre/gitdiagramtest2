using System.Collections;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;

namespace System.Text.RegularExpressions;

/// <summary>Represents an immutable regular expression.</summary>
public class Regex : ISerializable
{
	internal readonly struct CachedCodeEntryKey : IEquatable<CachedCodeEntryKey>
	{
		private readonly RegexOptions _options;

		private readonly string _cultureKey;

		private readonly string _pattern;

		public CachedCodeEntryKey(RegexOptions options, string cultureKey, string pattern)
		{
			_options = default(RegexOptions);
			_cultureKey = null;
			_pattern = null;
		}

		public override bool Equals(object obj)
		{
			return false;
		}

		public bool Equals(CachedCodeEntryKey other)
		{
			return false;
		}

		public static bool operator ==(CachedCodeEntryKey left, CachedCodeEntryKey right)
		{
			return false;
		}

		public override int GetHashCode()
		{
			return 0;
		}
	}

	internal sealed class CachedCodeEntry
	{
		public CachedCodeEntry Next;

		public CachedCodeEntry Previous;

		public readonly CachedCodeEntryKey Key;

		public RegexCode Code;

		public readonly Hashtable Caps;

		public readonly Hashtable Capnames;

		public readonly string[] Capslist;

		public readonly int Capsize;

		public readonly ExclusiveReference Runnerref;

		public readonly WeakReference<RegexReplacement> ReplRef;

		public CachedCodeEntry(CachedCodeEntryKey key, Hashtable capnames, string[] capslist, RegexCode code, Hashtable caps, int capsize, ExclusiveReference runner, WeakReference<RegexReplacement> replref)
		{
		}
	}

	private const int CacheDictionarySwitchLimit = 10;

	private static int s_cacheSize;

	private static readonly Dictionary<CachedCodeEntryKey, CachedCodeEntry> s_cache;

	private static int s_cacheCount;

	private static CachedCodeEntry s_cacheFirst;

	private static CachedCodeEntry s_cacheLast;

	private static readonly TimeSpan s_maximumMatchTimeout;

	private const string DefaultMatchTimeout_ConfigKeyName = "REGEX_DEFAULT_MATCH_TIMEOUT";

	internal static readonly TimeSpan s_defaultMatchTimeout;

	/// <summary>Specifies that a pattern-matching operation should not time out.</summary>
	public static readonly TimeSpan InfiniteMatchTimeout;

	/// <summary>The maximum amount of time that can elapse in a pattern-matching operation before the operation times out.</summary>
	protected internal TimeSpan internalMatchTimeout;

	internal const int MaxOptionShift = 10;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal string pattern;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal RegexOptions roptions;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal RegexRunnerFactory factory;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal Hashtable caps;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal Hashtable capnames;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal string[] capslist;

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	protected internal int capsize;

	internal ExclusiveReference _runnerref;

	internal WeakReference<RegexReplacement> _replref;

	internal RegexCode _code;

	internal bool _refsInitialized;

	/// <summary>Gets the options that were passed into the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.</summary>
	/// <returns>One or more members of the <see cref="T:System.Text.RegularExpressions.RegexOptions" /> enumeration that represent options that were passed to the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor</returns>
	public RegexOptions Options => default(RegexOptions);

	/// <summary>Gets a value that indicates whether the regular expression searches from right to left.</summary>
	/// <returns>
	///   <see langword="true" /> if the regular expression searches from right to left; otherwise, <see langword="false" />.</returns>
	public bool RightToLeft => false;

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private CachedCodeEntry GetCachedCode(CachedCodeEntryKey key, bool isToAdd)
	{
		return null;
	}

	private CachedCodeEntry GetCachedCodeEntryInternal(CachedCodeEntryKey key, bool isToAdd)
	{
		return null;
	}

	private void FillCacheDictionary()
	{
	}

	[MethodImpl(MethodImplOptions.AggressiveInlining)]
	private static bool TryGetCacheValue(CachedCodeEntryKey key, out CachedCodeEntry entry)
	{
		entry = null;
		return false;
	}

	private static bool TryGetCacheValueSmall(CachedCodeEntryKey key, out CachedCodeEntry entry)
	{
		entry = null;
		return false;
	}

	private static CachedCodeEntry LookupCachedAndPromote(CachedCodeEntryKey key)
	{
		return null;
	}

	/// <summary>Indicates whether the specified regular expression finds a match in the specified input string.</summary>
	/// <param name="input">The string to search for a match.</param>
	/// <param name="pattern">The regular expression pattern to match.</param>
	/// <returns>
	///   <see langword="true" /> if the regular expression finds a match; otherwise, <see langword="false" />.</returns>
	/// <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
	public static bool IsMatch(string input, string pattern)
	{
		return false;
	}

	/// <summary>Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options and time-out interval.</summary>
	/// <param name="input">The string to search for a match.</param>
	/// <param name="pattern">The regular expression pattern to match.</param>
	/// <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
	/// <param name="matchTimeout">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</param>
	/// <returns>
	///   <see langword="true" /> if the regular expression finds a match; otherwise, <see langword="false" />.</returns>
	/// <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.ArgumentOutOfRangeException">
	///   <paramref name="options" /> is not a valid <see cref="T:System.Text.RegularExpressions.RegexOptions" /> value.  
	/// -or-  
	/// <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</exception>
	/// <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred.</exception>
	public static bool IsMatch(string input, string pattern, RegexOptions options, TimeSpan matchTimeout)
	{
		return false;
	}

	/// <summary>Indicates whether the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor finds a match in a specified input string.</summary>
	/// <param name="input">The string to search for a match.</param>
	/// <returns>
	///   <see langword="true" /> if the regular expression finds a match; otherwise, <see langword="false" />.</returns>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="input" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
	public bool IsMatch(string input)
	{
		return false;
	}

	/// <summary>Indicates whether the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor finds a match in the specified input string, beginning at the specified starting position in the string.</summary>
	/// <param name="input">The string to search for a match.</param>
	/// <param name="startat">The character position at which to start the search.</param>
	/// <returns>
	///   <see langword="true" /> if the regular expression finds a match; otherwise, <see langword="false" />.</returns>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="input" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.ArgumentOutOfRangeException">
	///   <paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</exception>
	/// <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
	public bool IsMatch(string input, int startat)
	{
		return false;
	}

	/// <summary>Searches the specified input string for the first occurrence of the specified regular expression.</summary>
	/// <param name="input">The string to search for a match.</param>
	/// <param name="pattern">The regular expression pattern to match.</param>
	/// <returns>An object that contains information about the match.</returns>
	/// <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
	public static Match Match(string input, string pattern)
	{
		return null;
	}

	/// <summary>Searches the input string for the first occurrence of the specified regular expression, using the specified matching options and time-out interval.</summary>
	/// <param name="input">The string to search for a match.</param>
	/// <param name="pattern">The regular expression pattern to match.</param>
	/// <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
	/// <param name="matchTimeout">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</param>
	/// <returns>An object that contains information about the match.</returns>
	/// <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="input" /> or <paramref name="pattern" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.ArgumentOutOfRangeException">
	///   <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.  
	/// -or-  
	/// <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</exception>
	/// <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
	public static Match Match(string input, string pattern, RegexOptions options, TimeSpan matchTimeout)
	{
		return null;
	}

	/// <summary>Searches the specified input string for the first occurrence of the regular expression specified in the <see cref="T:System.Text.RegularExpressions.Regex" /> constructor.</summary>
	/// <param name="input">The string to search for a match.</param>
	/// <returns>An object that contains information about the match.</returns>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="input" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
	public Match Match(string input)
	{
		return null;
	}

	/// <summary>Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position in the string.</summary>
	/// <param name="input">The string to search for a match.</param>
	/// <param name="startat">The zero-based character position at which to start the search.</param>
	/// <returns>An object that contains information about the match.</returns>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="input" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.ArgumentOutOfRangeException">
	///   <paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</exception>
	/// <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
	public Match Match(string input, int startat)
	{
		return null;
	}

	/// <summary>Searches the specified input string for all occurrences of a regular expression, beginning at the specified starting position in the string.</summary>
	/// <param name="input">The string to search for a match.</param>
	/// <param name="startat">The character position in the input string at which to start the search.</param>
	/// <returns>A collection of the <see cref="T:System.Text.RegularExpressions.Match" /> objects found by the search. If no matches are found, the method returns an empty collection object.</returns>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="input" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.ArgumentOutOfRangeException">
	///   <paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</exception>
	public MatchCollection Matches(string input, int startat)
	{
		return null;
	}

	/// <summary>In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string.</summary>
	/// <param name="input">The string to search for a match.</param>
	/// <param name="pattern">The regular expression pattern to match.</param>
	/// <param name="replacement">The replacement string.</param>
	/// <returns>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</returns>
	/// <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="input" />, <paramref name="pattern" />, or <paramref name="replacement" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
	public static string Replace(string input, string pattern, string replacement)
	{
		return null;
	}

	/// <summary>In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</summary>
	/// <param name="input">The string to search for a match.</param>
	/// <param name="pattern">The regular expression pattern to match.</param>
	/// <param name="replacement">The replacement string.</param>
	/// <param name="options">A bitwise combination of the enumeration values that provide options for matching.</param>
	/// <param name="matchTimeout">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</param>
	/// <returns>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</returns>
	/// <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="input" />, <paramref name="pattern" />, or <paramref name="replacement" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.ArgumentOutOfRangeException">
	///   <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.  
	/// -or-  
	/// <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</exception>
	/// <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
	public static string Replace(string input, string pattern, string replacement, RegexOptions options, TimeSpan matchTimeout)
	{
		return null;
	}

	/// <summary>In a specified input string, replaces all strings that match a regular expression pattern with a specified replacement string.</summary>
	/// <param name="input">The string to search for a match.</param>
	/// <param name="replacement">The replacement string.</param>
	/// <returns>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</returns>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="input" /> or <paramref name="replacement" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
	public string Replace(string input, string replacement)
	{
		return null;
	}

	/// <summary>In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string.</summary>
	/// <param name="input">The string to search for a match.</param>
	/// <param name="replacement">The replacement string.</param>
	/// <param name="count">Maximum number of times the replacement can occur.</param>
	/// <param name="startat">The character position in the input string where the search begins.</param>
	/// <returns>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</returns>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="input" /> or <paramref name="replacement" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.ArgumentOutOfRangeException">
	///   <paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</exception>
	/// <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
	public string Replace(string input, string replacement, int count, int startat)
	{
		return null;
	}

	/// <summary>In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</summary>
	/// <param name="input">The string to search for a match.</param>
	/// <param name="pattern">The regular expression pattern to match.</param>
	/// <param name="evaluator">A custom method that examines each match and returns either the original matched string or a replacement string.</param>
	/// <returns>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</returns>
	/// <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="input" />, <paramref name="pattern" />, or <paramref name="evaluator" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
	public static string Replace(string input, string pattern, MatchEvaluator evaluator)
	{
		return null;
	}

	/// <summary>In a specified input string, replaces all substrings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</summary>
	/// <param name="input">The string to search for a match.</param>
	/// <param name="pattern">The regular expression pattern to match.</param>
	/// <param name="evaluator">A custom method that examines each match and returns either the original matched string or a replacement string.</param>
	/// <param name="options">A bitwise combination of enumeration values that provide options for matching.</param>
	/// <param name="matchTimeout">A time-out interval, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> to indicate that the method should not time out.</param>
	/// <returns>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <paramref name="pattern" /> is not matched in the current instance, the method returns the current instance unchanged.</returns>
	/// <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="input" />, <paramref name="pattern" />, or <paramref name="evaluator" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.ArgumentOutOfRangeException">
	///   <paramref name="options" /> is not a valid bitwise combination of <see cref="T:System.Text.RegularExpressions.RegexOptions" /> values.  
	/// -or-  
	/// <paramref name="matchTimeout" /> is negative, zero, or greater than approximately 24 days.</exception>
	/// <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
	public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options, TimeSpan matchTimeout)
	{
		return null;
	}

	/// <summary>In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</summary>
	/// <param name="input">The string to search for a match.</param>
	/// <param name="evaluator">A custom method that examines each match and returns either the original matched string or a replacement string.</param>
	/// <returns>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</returns>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="input" /> or <paramref name="evaluator" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
	public string Replace(string input, MatchEvaluator evaluator)
	{
		return null;
	}

	/// <summary>In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> delegate.</summary>
	/// <param name="input">The string to search for a match.</param>
	/// <param name="evaluator">A custom method that examines each match and returns either the original matched string or a replacement string.</param>
	/// <param name="count">The maximum number of times the replacement will occur.</param>
	/// <param name="startat">The character position in the input string where the search begins.</param>
	/// <returns>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</returns>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="input" /> or <paramref name="evaluator" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.ArgumentOutOfRangeException">
	///   <paramref name="startat" /> is less than zero or greater than the length of <paramref name="input" />.</exception>
	/// <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">A time-out occurred. For more information about time-outs, see the Remarks section.</exception>
	public string Replace(string input, MatchEvaluator evaluator, int count, int startat)
	{
		return null;
	}

	private static string Replace(MatchEvaluator evaluator, Regex regex, string input, int count, int startat)
	{
		return null;
	}

	static Regex()
	{
	}

	/// <summary>Checks whether a time-out interval is within an acceptable range.</summary>
	/// <param name="matchTimeout">The time-out interval to check.</param>
	protected internal static void ValidateMatchTimeout(TimeSpan matchTimeout)
	{
	}

	private static TimeSpan InitDefaultMatchTimeout()
	{
		return default(TimeSpan);
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class for the specified regular expression.</summary>
	/// <param name="pattern">The regular expression pattern to match.</param>
	/// <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="pattern" /> is <see langword="null" />.</exception>
	public Regex(string pattern)
	{
	}

	/// <summary>Initializes a new instance of the <see cref="T:System.Text.RegularExpressions.Regex" /> class for the specified regular expression, with options that modify the pattern.</summary>
	/// <param name="pattern">The regular expression pattern to match.</param>
	/// <param name="options">A bitwise combination of the enumeration values that modify the regular expression.</param>
	/// <exception cref="T:System.ArgumentException">A regular expression parsing error occurred.</exception>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="pattern" /> is <see langword="null" />.</exception>
	/// <exception cref="T:System.ArgumentOutOfRangeException">
	///   <paramref name="options" /> contains an invalid flag.</exception>
	public Regex(string pattern, RegexOptions options)
	{
	}

	/// <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data necessary to deserialize the current <see cref="T:System.Text.RegularExpressions.Regex" /> object.</summary>
	/// <param name="si">The object to populate with serialization information.</param>
	/// <param name="context">The place to store and retrieve serialized data. This parameter is reserved for future use.</param>
	void ISerializable.GetObjectData(SerializationInfo si, StreamingContext context)
	{
	}

	private Regex(string pattern, RegexOptions options, TimeSpan matchTimeout, bool addToCache)
	{
	}

	/// <summary>Escapes a minimal set of characters (\, *, +, ?, |, {, [, (,), ^, $, ., #, and white space) by replacing them with their escape codes. This instructs the regular expression engine to interpret these characters literally rather than as metacharacters.</summary>
	/// <param name="str">The input string that contains the text to convert.</param>
	/// <returns>A string of characters with metacharacters converted to their escaped form.</returns>
	/// <exception cref="T:System.ArgumentNullException">
	///   <paramref name="str" /> is <see langword="null" />.</exception>
	public static string Escape(string str)
	{
		return null;
	}

	/// <summary>Returns the regular expression pattern that was passed into the <see langword="Regex" /> constructor.</summary>
	/// <returns>The <paramref name="pattern" /> parameter that was passed into the <see langword="Regex" /> constructor.</returns>
	public override string ToString()
	{
		return null;
	}

	/// <summary>Gets the group name that corresponds to the specified group number.</summary>
	/// <param name="i">The group number to convert to the corresponding group name.</param>
	/// <returns>A string that contains the group name associated with the specified group number. If there is no group name that corresponds to <paramref name="i" />, the method returns <see cref="F:System.String.Empty" />.</returns>
	public string GroupNameFromNumber(int i)
	{
		return null;
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	/// <exception cref="T:System.NotSupportedException">References have already been initialized.</exception>
	protected void InitializeReferences()
	{
	}

	internal Match Run(bool quick, int prevlen, string input, int beginning, int length, int startat)
	{
		return null;
	}

	/// <summary>Used by a <see cref="T:System.Text.RegularExpressions.Regex" /> object generated by the <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> method.</summary>
	/// <returns>
	///   <see langword="true" /> if the <see cref="P:System.Text.RegularExpressions.Regex.Options" /> property contains the <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> option; otherwise, <see langword="false" />.</returns>
	protected internal bool UseOptionR()
	{
		return false;
	}

	internal bool UseOptionInvariant()
	{
		return false;
	}
}
