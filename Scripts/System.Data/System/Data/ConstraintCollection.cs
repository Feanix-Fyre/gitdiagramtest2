using System.Collections;
using System.ComponentModel;

namespace System.Data;

/// <summary>Represents a collection of constraints for a <see cref="T:System.Data.DataTable" />.</summary>
[DefaultEvent("CollectionChanged")]
public sealed class ConstraintCollection : InternalDataCollectionBase
{
	private readonly DataTable _table;

	private readonly ArrayList _list;

	private int _defaultNameIndex;

	private CollectionChangeEventHandler _onCollectionChanged;

	private Constraint[] _delayLoadingConstraints;

	private bool _fLoadForeignKeyConstraintsOnly;

	protected override ArrayList List => null;

	/// <summary>Gets the <see cref="T:System.Data.Constraint" /> from the collection at the specified index.</summary>
	/// <param name="index">The index of the constraint to return.</param>
	/// <returns>The <see cref="T:System.Data.Constraint" /> at the specified index.</returns>
	/// <exception cref="T:System.IndexOutOfRangeException">The index value is greater than the number of items in the collection.</exception>
	public Constraint this[int index] => null;

	internal DataTable Table => null;

	/// <summary>Gets the <see cref="T:System.Data.Constraint" /> from the collection with the specified name.</summary>
	/// <param name="name">The <see cref="P:System.Data.Constraint.ConstraintName" /> of the constraint to return.</param>
	/// <returns>The <see cref="T:System.Data.Constraint" /> with the specified name; otherwise a null value if the <see cref="T:System.Data.Constraint" /> does not exist.</returns>
	public Constraint this[string name] => null;

	internal ConstraintCollection(DataTable table)
	{
	}

	/// <summary>Adds the specified <see cref="T:System.Data.Constraint" /> object to the collection.</summary>
	/// <param name="constraint">The <see langword="Constraint" /> to add.</param>
	/// <exception cref="T:System.ArgumentNullException">The <paramref name="constraint" /> argument is null.</exception>
	/// <exception cref="T:System.ArgumentException">The constraint already belongs to this collection, or belongs to another collection.</exception>
	/// <exception cref="T:System.Data.DuplicateNameException">The collection already has a constraint with the same name. (The comparison is not case-sensitive.)</exception>
	public void Add(Constraint constraint)
	{
	}

	internal void Add(Constraint constraint, bool addUniqueWhenAddingForeign)
	{
	}

	/// <summary>Constructs a new <see cref="T:System.Data.UniqueConstraint" /> with the specified name, array of <see cref="T:System.Data.DataColumn" /> objects, and value that indicates whether the column is a primary key, and adds it to the collection.</summary>
	/// <param name="name">The name of the <see cref="T:System.Data.UniqueConstraint" />.</param>
	/// <param name="columns">An array of <see cref="T:System.Data.DataColumn" /> objects to which the constraint applies.</param>
	/// <param name="primaryKey">Specifies whether the column should be the primary key. If <see langword="true" />, the column will be a primary key column.</param>
	/// <returns>A new <see langword="UniqueConstraint" />.</returns>
	/// <exception cref="T:System.ArgumentException">The constraint already belongs to this collection.  
	///  -Or-  
	///  The constraint belongs to another collection.</exception>
	/// <exception cref="T:System.Data.DuplicateNameException">The collection already has a constraint with the specified name. (The comparison is not case-sensitive.)</exception>
	public Constraint Add(string name, DataColumn[] columns, bool primaryKey)
	{
		return null;
	}

	private void AddUniqueConstraint(UniqueConstraint constraint)
	{
	}

	private void AddForeignKeyConstraint(ForeignKeyConstraint constraint)
	{
	}

	private bool AutoGenerated(Constraint constraint)
	{
		return false;
	}

	private void ArrayAdd(Constraint constraint)
	{
	}

	private void ArrayRemove(Constraint constraint)
	{
	}

	internal string AssignName()
	{
		return null;
	}

	private void BaseAdd(Constraint constraint)
	{
	}

	private void BaseGroupSwitch(Constraint[] oldArray, int oldLength, Constraint[] newArray, int newLength)
	{
	}

	private void BaseRemove(Constraint constraint)
	{
	}

	internal bool CanRemove(Constraint constraint, bool fThrowException)
	{
		return false;
	}

	/// <summary>Clears the collection of any <see cref="T:System.Data.Constraint" /> objects.</summary>
	public void Clear()
	{
	}

	/// <summary>Indicates whether the <see cref="T:System.Data.Constraint" /> object specified by name exists in the collection.</summary>
	/// <param name="name">The <see cref="P:System.Data.Constraint.ConstraintName" /> of the constraint.</param>
	/// <returns>
	///   <see langword="true" /> if the collection contains the specified constraint; otherwise, <see langword="false" />.</returns>
	public bool Contains(string name)
	{
		return false;
	}

	internal bool Contains(string name, bool caseSensitive)
	{
		return false;
	}

	internal Constraint FindConstraint(Constraint constraint)
	{
		return null;
	}

	internal UniqueConstraint FindKeyConstraint(DataColumn[] columns)
	{
		return null;
	}

	internal UniqueConstraint FindKeyConstraint(DataColumn column)
	{
		return null;
	}

	internal ForeignKeyConstraint FindForeignKeyConstraint(DataColumn[] parentColumns, DataColumn[] childColumns)
	{
		return null;
	}

	private static bool CompareArrays(DataColumn[] a1, DataColumn[] a2)
	{
		return false;
	}

	internal int InternalIndexOf(string constraintName)
	{
		return 0;
	}

	private string MakeName(int index)
	{
		return null;
	}

	private void OnCollectionChanged(CollectionChangeEventArgs ccevent)
	{
	}

	internal void RegisterName(string name)
	{
	}

	/// <summary>Removes the specified <see cref="T:System.Data.Constraint" /> from the collection.</summary>
	/// <param name="constraint">The <see cref="T:System.Data.Constraint" /> to remove.</param>
	/// <exception cref="T:System.ArgumentNullException">The <paramref name="constraint" /> argument is <see langword="null" />.</exception>
	/// <exception cref="T:System.ArgumentException">The constraint does not belong to the collection.</exception>
	public void Remove(Constraint constraint)
	{
	}

	internal void UnregisterName(string name)
	{
	}
}
