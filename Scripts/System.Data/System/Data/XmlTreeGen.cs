using System.Collections;
using System.ComponentModel;
using System.Xml;

namespace System.Data;

internal sealed class XmlTreeGen
{
	private ArrayList _constraintNames;

	private Hashtable _namespaces;

	private Hashtable _autogenerated;

	private Hashtable _prefixes;

	private DataSet _ds;

	private ArrayList _tables;

	private ArrayList _relations;

	private XmlDocument _dc;

	private XmlElement _sRoot;

	private int _prefixCount;

	private SchemaFormat _schFormat;

	private string _filePath;

	private string _fileName;

	private string _fileExt;

	private XmlElement _dsElement;

	private XmlElement _constraintSeparator;

	private Converter<Type, string> _targetConverter;

	internal XmlTreeGen(SchemaFormat format)
	{
	}

	internal static void AddExtendedProperties(PropertyCollection props, XmlElement node)
	{
	}

	internal static void AddExtendedProperties(PropertyCollection props, XmlElement node, Type type)
	{
	}

	internal void AddXdoProperties(object instance, XmlElement root, XmlDocument xd)
	{
	}

	internal void AddXdoProperty(PropertyDescriptor pd, object instance, XmlElement root, XmlDocument xd)
	{
	}

	internal static string XmlDataTypeName(Type type)
	{
		return null;
	}

	private void GenerateConstraintNames(DataTable table, bool fromTable)
	{
	}

	private void GenerateConstraintNames(ArrayList tables)
	{
	}

	private void GenerateConstraintNames(DataSet ds)
	{
	}

	private static bool _PropsNotEmpty(PropertyCollection props)
	{
		return false;
	}

	private bool HaveExtendedProperties(DataSet ds)
	{
		return false;
	}

	internal void WriteSchemaRoot(XmlDocument xd, XmlElement rootSchema, string targetNamespace)
	{
	}

	internal static void ValidateColumnMapping(Type columnType)
	{
	}

	internal void SetupAutoGenerated(DataSet ds)
	{
	}

	internal void SetupAutoGenerated(ArrayList dt)
	{
	}

	internal void SetupAutoGenerated(DataTable dt)
	{
	}

	private void CreateTablesHierarchy(DataTable dt)
	{
	}

	private void CreateRelations(DataTable dt)
	{
	}

	private DataTable[] CreateToplevelTables()
	{
		return null;
	}

	internal void SchemaTree(XmlDocument xd, XmlWriter xmlWriter, DataSet ds, DataTable dt, bool writeHierarchy)
	{
	}

	internal XmlElement SchemaTree(XmlDocument xd, DataTable dt)
	{
		return null;
	}

	internal XmlElement FillDataSetElement(XmlDocument xd, DataSet ds, DataTable dt)
	{
		return null;
	}

	internal void SetPath(XmlWriter xw)
	{
	}

	internal void Save(DataSet ds, XmlWriter xw)
	{
	}

	internal void Save(DataTable dt, XmlWriter xw)
	{
	}

	internal void Save(DataSet ds, DataTable dt, XmlWriter xw)
	{
	}

	internal void Save(DataSet ds, DataTable dt, XmlWriter xw, bool writeHierarchy)
	{
	}

	internal void Save(DataSet ds, DataTable dt, XmlWriter xw, bool writeHierarchy, Converter<Type, string> multipleTargetConverter)
	{
	}

	internal XmlElement HandleRelation(DataRelation rel, XmlDocument dc)
	{
		return null;
	}

	private static XmlElement FindSimpleType(XmlElement schema, string name)
	{
		return null;
	}

	internal XmlElement GetSchema(string NamespaceURI)
	{
		return null;
	}

	internal void HandleColumnType(DataColumn col, XmlDocument dc, XmlElement root, XmlElement schema)
	{
	}

	internal void AddColumnProperties(DataColumn col, XmlElement root)
	{
	}

	private string FindTargetNamespace(DataTable table)
	{
		return null;
	}

	internal XmlElement HandleColumn(DataColumn col, XmlDocument dc, XmlElement schema, bool fWriteOrdinal)
	{
		return null;
	}

	internal static string TranslateAcceptRejectRule(AcceptRejectRule rule)
	{
		return null;
	}

	internal static string TranslateRule(Rule rule)
	{
		return null;
	}

	internal void AppendChildWithoutRef(XmlElement node, string Namespace, XmlElement el, string refString)
	{
	}

	internal XmlElement FindTypeNode(XmlElement node, string strType)
	{
		return null;
	}

	internal XmlElement HandleTable(DataTable table, XmlDocument dc, XmlElement schema)
	{
		return null;
	}

	private bool HasMixedColumns(DataTable table)
	{
		return false;
	}

	internal static bool AutoGenerated(DataColumn col)
	{
		return false;
	}

	internal static bool AutoGenerated(DataRelation rel)
	{
		return false;
	}

	internal static bool AutoGenerated(UniqueConstraint unique)
	{
		return false;
	}

	private bool AutoGenerated(ForeignKeyConstraint fk)
	{
		return false;
	}

	internal static bool AutoGenerated(ForeignKeyConstraint fk, bool checkRelation)
	{
		return false;
	}

	private bool IsAutoGenerated(object o)
	{
		return false;
	}

	internal XmlElement HandleTable(DataTable table, XmlDocument dc, XmlElement schema, bool genNested)
	{
		return null;
	}

	private void SetMSDataAttribute(XmlElement root, Type type)
	{
	}
}
